spring.application.name=movie-music-search
server.port=8080

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "hero"
#spring.datasource.url = jdbc:mysql://localhost:3306/hero

# Connection url for the HSQLDB database "hero"
#spring.datasource.url = jdbc:hsqldb:file:hero
#spring.datasource.url = jdbc:hsqldb:mem:.

# Connection url for the H2 database "hero"
spring.datasource.url = jdbc:h2:file:~/database

# Username and password for MySQL
#spring.datasource.username = root
#spring.datasource.password = noCandy4u

# Username and password for HSQLDB
#spring.datasource.username = sa
#spring.datasource.password =

# Username and password for H2
spring.datasource.username = sa
spring.datasource.password = sa

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


themoviedb.url=https://api.themoviedb.org/3/search/movie?query={name}&api_key=
themoviedb.key={key}

lastmusic.url=http://ws.audioscrobbler.com/2.0/?method=album.search&album={name}&format=json&api_key=
lastmusic.key={key}



